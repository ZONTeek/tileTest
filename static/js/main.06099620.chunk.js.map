{"version":3,"sources":["components/Tile.jsx","helperFunctions.js","redux/tiles-reducer.jsx","components/TilesContainer.jsx","App.js","redux/redux-store.jsx","index.js"],"names":["Tile","status","props","selectTile","className","style","backgroundColor","color","onClick","id","randomInteger","min","max","rand","Math","random","round","changeStatus","arr","key","map","t","statusCloseTiles","id_1","id_2","getRandomRounds","newArray","i","colors","counter","ColorsOnRound","j","length","push","forEach","c","TILE_SELECT","GAME_START","COMPARE","OPEN_TILE","SHOWING_TILE","NEXT_ROUND","stateInit","AllRoundTiles","currentTiles","selectedTile","currentRound","showing","foundPairs","showingTileToggle","type","openTile","compare","nextRound","tilesReducer","state","action","TilesContainer","compareTiles","setSelectedTile","matchTileThunk","this","gameStart","React","Component","connect","dispatch","setTimeout","App","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06099620.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TileStyle.css\";\r\n\r\nconst closedTileColor = (status) => {\r\n  if (status === \"active\")\r\n    return \"tile\";\r\n  else if (status === \"chosen\")\r\n    return \"chosen\";\r\n  else return \"disabled\";\r\n}\r\n\r\n\r\nconst Tile = ({ props, selectTile }) => {\r\n  return <figure\r\n    className={closedTileColor(props.status)}\r\n    style={props.status === \"chosen\" ? { backgroundColor: props.color } : null}\r\n    onClick={() => { if (props.status !== \"disabled\") selectTile(props.id) }}\r\n  />\r\n}\r\n\r\nexport default Tile;","const randomInteger = (min, max) => {\r\n  let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n  return Math.round(rand);\r\n};\r\n\r\nexport const changeStatus = (arr, key, status) => {\r\n  return arr.map((t) => {\r\n    if (t.id === key) {\r\n      t.status = status;\r\n      return t;\r\n    } else return t;\r\n  })\r\n}\r\nexport const statusCloseTiles = (arr, id_1, id_2, status) => {\r\n  return arr.map((t) => {\r\n    if (t.id === id_1 || t.id === id_2) {\r\n      t.status = status;\r\n      return t;\r\n    } else return t;\r\n  })\r\n}\r\nexport const getRandomRounds = () => {\r\n  const newArray = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let colors = [\r\n      { color: \"blue\", counter: 0 },\r\n      { color: \"yellow\", counter: 0 },\r\n      { color: \"green\", counter: 0 },\r\n      { color: \"purple\", counter: 0 },\r\n      { color: \"orange\", counter: 0 },\r\n      { color: \"lime\", counter: 0 },\r\n      { color: \"aqua\", counter: 0 },\r\n      { color: \"pink\", counter: 0 }\r\n    ];\r\n    let ColorsOnRound = [];\r\n    for (let j = 0; j < 16; j++) {\r\n      let rand = randomInteger(0, colors.length - 1);\r\n      if (colors[rand].counter < 2) {\r\n        ColorsOnRound.push({\r\n          id: j,\r\n          status: \"active\",\r\n          color: colors[rand].color\r\n        });\r\n        colors[rand].counter++;\r\n      } else {\r\n        colors.forEach((c) => {\r\n          if (c.counter <= 1) return c;\r\n        });\r\n        j--;\r\n      }\r\n    }\r\n    newArray.push(ColorsOnRound);\r\n  }\r\n  return newArray;\r\n}","import { changeStatus, statusCloseTiles, getRandomRounds } from \"../helperFunctions\";\r\n\r\nconst TILE_SELECT = \"TILE_SELECT\";\r\nconst GAME_START = \"GAME_START\";\r\nconst COMPARE = \"COMPARE\";\r\nconst OPEN_TILE = \"OPEN_TILE\";\r\nconst SHOWING_TILE = \"SHOWING_TILE\";\r\nconst NEXT_ROUND = \"NEXT_ROUND\";\r\n\r\n\r\nlet stateInit = {\r\n  AllRoundTiles: [], // Contains arrays with tiles on round\r\n  currentTiles: [],\r\n  selectedTile: -1,\r\n  currentRound: 0,\r\n  showing: false, // block clicks on others tile while showing chosen tiles\r\n  foundPairs: 0,\r\n};\r\n\r\nconst tilesReducer = (state = stateInit, action) => {\r\n  switch (action.type) {\r\n    case TILE_SELECT: {\r\n      switch (state.selectedTile) {\r\n        case -1: { //first tile isn't chosen, save id of tile\r\n          return ({\r\n            ...state,\r\n            currentTiles: changeStatus(state.currentTiles, action.id, \"chosen\"),\r\n            selectedTile: action.id,\r\n          })\r\n        };\r\n        case action.id: { //first and second tile match\r\n          return {\r\n            ...state,\r\n            currentTiles: changeStatus(state.currentTiles, action.id, \"active\"),\r\n            selectedTile: -1,\r\n          }\r\n        }\r\n        default: return { ...state, selectedTile: -1 }\r\n      }\r\n    }\r\n    case COMPARE: {\r\n      if (state.currentTiles[action.id].color === state.currentTiles[state.selectedTile].color\r\n        &&\r\n        state.selectedTile !== -1) { //colors of two different chosen tiles are match \r\n        return {\r\n          ...state,\r\n          currentTiles: statusCloseTiles(state.currentTiles, state.selectedTile, action.id, \"disabled\"),\r\n          selectedTile: -1,\r\n          foundPairs: state.foundPairs + 1,\r\n        }\r\n      } else return { //colors don't match, return to closed state\r\n        ...state,\r\n        currentTiles: statusCloseTiles(state.currentTiles, state.selectedTile, action.id, \"active\"),\r\n        selectedTile: -1,\r\n      }\r\n    }\r\n    case OPEN_TILE:\r\n      return ({\r\n        ...state,\r\n        currentTiles: changeStatus(state.currentTiles, action.id, \"chosen\"),\r\n      })\r\n    case SHOWING_TILE: return { ...state, showing: !state.showing }\r\n    case GAME_START: {\r\n      let AllRoundTiles = getRandomRounds()\r\n      return { ...state, AllRoundTiles: AllRoundTiles, currentTiles: AllRoundTiles[0] }\r\n    }\r\n    case NEXT_ROUND: {\r\n      if (state.currentRound < 3) return {\r\n        ...state,\r\n        currentRound: state.currentRound + 1,\r\n        currentTiles: state.AllRoundTiles[state.currentRound + 1],\r\n        foundPairs: 0,\r\n      }\r\n    }\r\n    default: return state;\r\n  }\r\n};\r\n\r\nexport const matchTileThunk = (id, foundPairs) => dispatch => {\r\n  dispatch(openTile(id));\r\n  dispatch(showingTileToggle());\r\n  setTimeout(() => dispatch(compare(id)), 500);\r\n  setTimeout(() => dispatch(showingTileToggle()), 500);\r\n  if (foundPairs === 7) setTimeout(() => dispatch(nextRound()), 1000);\r\n}\r\n\r\nconst showingTileToggle = () => ({ type: SHOWING_TILE })\r\nconst openTile = (id) => ({ type: OPEN_TILE, id })\r\nconst compare = (id) => ({ type: COMPARE, id })\r\n\r\nexport const setSelectedTile = (id) => ({ type: TILE_SELECT, id });\r\nexport const gameStart = () => ({ type: GAME_START, })\r\nexport const nextRound = () => ({ type: NEXT_ROUND })\r\n\r\nexport default tilesReducer;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./TileStyle.css\";\r\nimport { setSelectedTile, gameStart, matchTileThunk, nextRound } from \"../redux/tiles-reducer\";\r\n\r\n\r\nclass TilesContainer extends React.Component {\r\n  componentDidMount() {\r\n    this.props.gameStart();\r\n  }\r\n  compareTiles = (id) => {\r\n    if (!this.props.state.showing) {\r\n      (this.props.state.selectedTile === -1 || this.props.state.selectedTile === id) ?\r\n        this.props.setSelectedTile(id) :\r\n        this.props.matchTileThunk(id, this.props.state.foundPairs);\r\n    }\r\n  }\r\n  render() {\r\n    if (this.props.state.currentRound < 10) {\r\n      return <div className=\"tiles\">\r\n        {\r\n          this.props.state.AllRoundTiles[0] ?\r\n            this.props.state.AllRoundTiles[this.props.state.currentRound].map(t => {\r\n              return <Tile\r\n                key={t.id}\r\n                props={t}\r\n                selectTile={this.compareTiles}\r\n              />\r\n            }) : null\r\n        }\r\n        <span>Round {this.props.state.currentRound + 1}</span>\r\n      </div>\r\n    } else return <h1>You win!</h1>\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({ state })\r\n\r\nexport default connect(mapStateToProps, { setSelectedTile, gameStart, matchTileThunk, nextRound })(TilesContainer)","import TilesContainer from './components/TilesContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <TilesContainer />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport tilesReducer from \"./tiles-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n\r\nlet store = createStore(tilesReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}